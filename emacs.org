:PROPERTIES:
:STARTUP: showall
:END:

#+TITLE: william's emacs config
#+PROPERTY: header-args :tangle ~/.emacs.d/init.el

To compile, use =org-babel-tangle=

* initialisation
** package repositories
#+BEGIN_SRC elisp
  (require 'package)

  (add-to-list 'package-archives '("gnu"   . "https://elpa.gnu.org/packages/"))
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)

  (package-initialize)
#+END_SRC

** use-package
https://ianyepan.github.io/posts/setting-up-use-package/

#+BEGIN_SRC elisp
  (require 'use-package)

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (eval-and-compile
    (setq use-package-always-ensure t
	  use-package-expand-minimally t))
#+END_SRC

** asdf version manager
https://github.com/tabfugnic/asdf.el

Makes sure emacs has the correct paths to asdf shims and
bin. Otherwise cli tools (e.g. gofmt) will not work, as they are
sources in =.bashrc= and not =.profile=.

#+BEGIN_SRC elisp
  (add-to-list 'load-path "~/.emacs.d/asdf.el") 
  (require 'asdf)
  (asdf-enable)
#+END_SRC

* global key bindings
** toggle auto-complete with C-`
#+BEGIN_SRC elisp
  (global-set-key (kbd "C-`") 'auto-complete-mode)
#+END_SRC

** toggle spelling checker with C-1
#+BEGIN_SRC elisp
  (global-set-key (kbd "C-1") 'flyspell-mode)
#+END_SRC

** buffer-menu instead of list-buffers
#+BEGIN_SRC elisp
  (global-set-key (kbd "C-x C-b") 'buffer-menu)
#+END_SRC

** dragging lines up
#+BEGIN_SRC elisp
  (global-set-key (kbd "C-S-<up>") 'move-line-up)
#+END_SRC

** dragging lines down
#+BEGIN_SRC elisp
  (global-set-key (kbd "C-S-<down>") 'move-line-down)
#+END_SRC

** kill buffer and quit window
#+BEGIN_SRC elisp
  (global-set-key (kbd "C-x q") 'kill-buffer-and-window)
#+END_SRC

** kill current buffer
#+BEGIN_SRC elisp
  (global-set-key (kbd "s-k") 'kill-this-buffer)
#+END_SRC

** zoom in and out
#+BEGIN_SRC elisp
  (global-set-key (kbd "s-+") 'text-scale-increase)
  (global-set-key (kbd "s--") 'text-scale-decrease)
#+END_SRC

* other global configuration
** me
#+BEGIN_SRC elisp
  (setq user-full-name     "William Santos"
	user-mail-address  "w@wsantos.net")
#+END_SRC

** credentials
#+BEGIN_SRC elisp
  (setq auth-sources '("~/Org/.authinfo.gpg"))
#+END_SRC

** set encoding
#+BEGIN_SRC elisp
  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
#+END_SRC

** automatically refresh buffers when files change on disk
#+BEGIN_SRC elisp
  (global-auto-revert-mode t)
#+END_SRC

** date and time
#+BEGIN_SRC elisp
  (setq calendar-week-start-day 1)
  (setq display-time-format "%a %d %b %I:%M%p")
#+END_SRC

** warn when opening files > 100MB
#+BEGIN_SRC elisp
  (setq large-file-warning-threshold 100000000)
#+END_SRC

** drag current line up and down
https://emacsredux.com/blog/2013/04/02/move-current-line-up-or-down/

#+BEGIN_SRC elisp
  (defun move-line-up ()
    (interactive)
    (transpose-lines 1)
    (forward-line -2)
    (indent-according-to-mode))

  (defun move-line-down ()
    (interactive)
    (forward-line 1)
    (transpose-lines 1)
    (forward-line -1)
    (indent-according-to-mode))
#+END_SRC

** turn off system bell
#+BEGIN_SRC elisp
  (setq ring-bell-function 'ignore)
#+END_SRC

** quit even if processes are running
#+BEGIN_SRC elisp
  (setq confirm-kill-processes nil)
#+END_SRC

** don't show default startup screen
#+BEGIN_SRC elisp
  (setq inhibit-startup-screen t)
#+END_SRC

** display time globally
#+BEGIN_SRC elisp
(display-time-mode 1)
#+END_SRC

** don't blink cursor
#+BEGIN_SRC elisp
(blink-cursor-mode -1)
#+END_SRC

** always show line numbers
#+BEGIN_SRC elisp
(global-display-line-numbers-mode)
#+END_SRC

** hide toolbars and scroll bars
#+BEGIN_SRC elisp
  (menu-bar-mode 0)
  (tool-bar-mode 0)
  (toggle-scroll-bar 0)
#+END_SRC

** configure mode line
#+BEGIN_SRC elisp
  (line-number-mode t)
  (column-number-mode t)
  (size-indication-mode t)
#+END_SRC

** move cursor from window to window using meta + arrow keys
#+BEGIN_SRC elisp
  (when (fboundp 'windmove-default-keybindings)
    (windmove-default-keybindings 'meta))
#+END_SRC

** smooth scrolling
https://github.com/bbatsov/emacs.d/blob/master/init.el#L82

#+BEGIN_SRC elisp
  (setq scroll-margin                   0
	scroll-conservatively           100000
	scroll-preserve-screen-position 1)

  (when (fboundp 'pixel-scroll-precision-mode)
    (pixel-scroll-precision-mode t))
#+END_SRC

** always toggle-truncate-lines by default
#+BEGIN_SRC elisp
  (setq-default truncate-lines t)
#+END_SRC

* utilities and ui packages
** treemacs
https://github.com/Alexander-Miller/treemacs

#+BEGIN_SRC elisp
  (use-package treemacs
    :ensure t
    :init
    (global-set-key (kbd "C-\\") 'treemacs)
    (setq treemacs-user-mode-line-format " william's emacs "
	  treemacs-width 45))
#+END_SRC

** doom mode-line
https://github.com/seagle0128/doom-modeline?tab=readme-ov-file

#+BEGIN_SRC elisp
  (use-package doom-modeline
    :ensure t
    :config
    (setq doom-modeline-buffer-file-name-style 'file-name)
    :init (doom-modeline-mode 1))
#+END_SRC

** git gutter
https://github.com/emacsorphanage/git-gutter

#+BEGIN_SRC elisp
  (use-package git-gutter
    :ensure t
    :config
    (global-git-gutter-mode 1))
#+END_SRC

** paren
https://github.com/emacs-mirror/emacs/blob/master/lisp/paren.el

#+BEGIN_SRC elisp
  (use-package paren
    :ensure t
    :config
    (show-paren-mode +1))
#+END_SRC

** doom themes
https://github.com/doomemacs/themes

1. dark
   - doom-acario-dark
   - doom-challenger-deep
   - doom-horizon
   - doom-manegarm
   - doom-moonlight
   - doom-nord
   - doom-oceanic-next
   - doom-outrun-electric
   - doom-solarized-dark
   - doom-sourcerer
   - doom-tomorrow-night

2. light
   - doom-nord-light
   - doom-acario-light
   - doom-solarized-light
   - doom-tomorrow-day

#+BEGIN_SRC elisp
  (use-package doom-themes
    :ensure t
    :config
    (setq doom-themes-enable-bold t
	  doom-themes-enable-italic t)
    (load-theme 'doom-oceanic-next t))
#+END_SRC

** padding
https://github.com/protesilaos/spacious-padding

#+BEGIN_SRC elisp
  (use-package spacious-padding
    :ensure t
    :hook (after-init . spacious-padding-mode))
#+END_SRC

** vertico
https://github.com/minad/vertico

#+BEGIN_SRC elisp
  (use-package vertico
    :ensure t
    :init
    (vertico-mode))
#+END_SRC

** vertico posframe
https://github.com/tumashu/vertico-posframe

#+BEGIN_SRC elisp
  (use-package vertico-posframe
    :ensure t
    :init
    (vertico-posframe-mode))
#+END_SRC

** all the icons
https://github.com/domtronn/all-the-icons.el

#+BEGIN_SRC elisp
  (use-package all-the-icons
    :ensure t
    :if (display-graphic-p))
#+END_SRC

** nerd icons
https://github.com/emacsmirror/nerd-icons

#+BEGIN_SRC elisp
  (use-package nerd-icons
    :ensure t)
#+END_SRC

** savehist
https://github.com/emacs-mirror/emacs/blob/master/lisp/savehist.el

#+BEGIN_SRC elisp
  (use-package savehist
    :ensure t
    :init
    (savehist-mode))
#+END_SRC

** marginalia
https://github.com/minad/marginalia

#+BEGIN_SRC elisp
  (use-package marginalia
    :after vertico
    :ensure t
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy
			     marginalia-annotators-light nil))
    :init
    (marginalia-mode))
#+END_SRC

** flyspell
https://www.emacswiki.org/emacs/FlySpell

#+BEGIN_SRC elisp
  (use-package flyspell
    :ensure t
    :config
    (add-hook 'chatgpt-shell-mode-hook 'flyspell-mode)
    (add-hook 'org-mode-hook 'flyspell-mode)
    (add-hook 'text-mode-hook 'flyspell-mode)
    (add-hook 'latex-mode-hook 'flyspell-mode)
    (add-hook 'magit-mode-hook 'flyspell-mode)
    (add-hook 'markdown-mode-hook 'flyspell-mode)
    (add-hook 'dockerfile-mode-hook 'flyspell-mode)
    (add-hook 'yaml-mode-hook 'flyspell-mode)
    (add-hook 'xml-mode-hook 'flyspell-mode))
#+END_SRC

** ement
https://github.com/alphapapa/ement.el

#+BEGIN_SRC elisp
  (use-package ement
    :ensure t)
#+END_SRC

** chatgpt-shell
https://github.com/xenodium/chatgpt-shell

#+BEGIN_SRC elisp
  (use-package chatgpt-shell
    :ensure t
    :config
    (setq chatgpt-shell-model-version "gpt-4")
    (setq chatgpt-shell-model-temperature 1.0)
    (setq chatgpt-shell-welcome-function nil)
    (setq chatgpt-shell-openai-key
      (auth-source-pick-first-password :host "api.openai.com")))
#+END_SRC

** magit
https://github.com/magit/magit

#+BEGIN_SRC elisp
  (use-package magit
    :ensure t
    :config
    (with-eval-after-load 'magit-mode
      (add-hook 'after-save-hook 'magit-after-save-refresh-status t)))
#+END_SRC

** org mode
https://orgmode.org/

#+BEGIN_SRC elisp
  (use-package org
    :ensure t
    :mode
    ("\\.org\\'" . org-mode)
    :config
    (setq org-use-speed-commands t
	  org-return-follows-link t
	  org-deadline-warning-days 30
	  org-latex-pdf-process (list "latexmk -f -pdf %f")
	  org-agenda-files '("~/Org/william/me.org"))

    (org-babel-do-load-languages 'org-babel-load-languages
				 '((emacs-lisp . t)
				   (python . t)
				   (latex . t)))

    (global-set-key (kbd "C-c l") 'org-store-link)
    (global-set-key (kbd "C-c a") 'org-agenda)
    (global-set-key (kbd "C-c c") 'org-capture))
#+END_SRC

** org roam
https://github.com/org-roam/org-roam

#+BEGIN_SRC elisp
  (use-package org-roam
    :ensure t
    :config
    (org-roam-db-autosync-mode)
    :init
    (setq org-roam-directory "~/Org/william/notes"))
#+END_SRC

** ripgrep
https://github.com/dajva/rg.el

#+BEGIN_SRC elisp
  (use-package rg
    :ensure t
    :config
    (rg-enable-default-bindings))
#+END_SRC

* syntax highlighting and language modes
** go mode
https://github.com/dominikh/go-mode.el

#+BEGIN_SRC elisp
  (use-package go-mode
    :ensure t
    :config
    (add-hook 'go-mode-hook (lambda () (add-hook 'before-save-hook 'gofmt-before-save))))
#+END_SRC

** rust mode
https://github.com/rust-lang/rust-mode
#+BEGIN_SRC elisp
  (use-package rust-mode
    :ensure t
    :config
    (setq rust-format-on-save t))
#+END_SRC

** elm mode
https://github.com/jcollard/elm-mode

#+BEGIN_SRC elisp
  (use-package elm-mode
    :ensure t
    :config
    (add-hook 'elm-mode-hook (lambda () (add-hook 'before-save-hook 'elm-format-buffer))))
#+END_SRC

** react/jsx mode
https://github.com/felipeochoa/rjsx-mode

#+BEGIN_SRC elisp
  (use-package rjsx-mode
    :ensure t)
#+END_SRC

** svelte mode
https://github.com/leafOfTree/svelte-mode

#+BEGIN_SRC elisp
  (use-package svelte-mode
    :ensure t)
#+END_SRC

** elixir mode
https://github.com/elixir-editors/emacs-elixir

#+BEGIN_SRC elisp
  (use-package elixir-mode
    :ensure t
    :config
    (add-hook 'elixir-mode-hook (lambda () (add-hook 'before-save-hook 'elixir-format nil t))))
#+END_SRC

** yaml mode
https://github.com/yoshiki/yaml-mode

#+BEGIN_SRC elisp
  (use-package yaml-mode
    :ensure t)
#+END_SRC

** dockerfile mode
https://github.com/spotify/dockerfile-mode

#+BEGIN_SRC elisp
  (use-package dockerfile-mode
    :ensure t)
#+END_SRC

** markdown mode
https://github.com/jrblevin/markdown-mode

#+BEGIN_SRC elisp
  (use-package markdown-mode
    :ensure t)
#+END_SRC

** terraform mode
https://github.com/hcl-emacs/terraform-mode

#+BEGIN_SRC elisp
  (use-package terraform-mode
    :ensure t)
#+END_SRC

* auto generated stuff
** custom set variables
#+BEGIN_SRC elisp
  (custom-set-variables
   ;; custom-set-variables was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(elfeed-search-date-format '("%d-%m-%Y %H-%M-%S" 20 :left))
   '(elfeed-search-title-max-width 60)
   '(elfeed-search-title-min-width 25)
   '(elfeed-user-agent "william >:)")
   '(git-gutter:added-sign "a")
   '(git-gutter:deleted-sign "r")
   '(git-gutter:modified-sign "m")
   '(org-agenda-files nil)
   '(package-selected-packages '())
   '(scroll-down-aggressively nil))
#+END_SRC

** custom set faces
#+BEGIN_SRC elisp
  (custom-set-faces
   ;; custom-set-faces was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   )
  (put 'upcase-region 'disabled nil)
  (put 'downcase-region 'disabled nil)
#+END_SRC
